-- Musikverein: create.sql

create table Adresse (
    Ort                 varchar(30),
    Strasse             varchar(30),
    Hausnummer          int,
    Land                char(3) default 'AUT',
    constraint Adresse_pk primary key (Ort, Strasse, Hausnummer, Land),
    constraint valid_hausnr check (Hausnummer > 0)
);

create table Gebaeude (
    Ort                 varchar(30),
    Strasse             varchar(30),
    Hausnummer          int,
    Land                char(3),
    Bezeichnung         varchar(30) unique,
    Baudatum            date,
    Besitzer            varchar(30), 
    constraint Gebaeude_pk primary key (Ort, Strasse, Hausnummer, Land, Bezeichnung),
    constraint Gebaeude_fk foreign key (Ort, Strasse, Hausnummer, Land) references Adresse (Ort, Strasse, Hausnummer, Land) on delete set null
);

create table Raum (
    Ort                 varchar(30),
    Strasse             varchar(30),
    Hausnummer          int,
    Land                char(3),
    Gebaeudename        varchar(30),
    Raumnr              int,
    Kapazitaet          int,
    constraint Raum_pk primary key (Gebaeudename, Raumnr),
    constraint Raum_fk foreign key (Ort, Strasse, Hausnummer, Land, Gebaeudename) references Gebaeude (Ort, Strasse, Hausnummer, Land, Bezeichnung)
);

create table Ausstattung (
    Gebaeudename        varchar(30),
    Raumnr              int,
    Beschreibung        varchar(30),
    Anzahl              int not null,
    constraint Ausstattung_pk primary key (Gebaeudename, Raumnr, Beschreibung),
    constraint Ausstattung_fk foreign key (Gebaeudename, Raumnr) references Raum (Gebaeudename, Raumnr),
    constraint amount_greater_zero check (Anzahl > 0)
);

create table Musikverein (
    Ort                 varchar(30),
    Strasse             varchar(30),
    Hausnummer          int,
    Land                char(3),
    Vereinsgebaeude     varchar(30),
    Namen               varchar(30),
    Gruendungsdatum     date,
    constraint Musikverein_pk primary key (Namen),
    constraint Musikverein_fk foreign key (Ort, Strasse, Hausnummer, Land, Vereinsgebaeude) references Gebaeude(Ort, Strasse, Hausnummer, Land, Bezeichnung) on delete set null
);

create table Vereinsauszeichnung (
    MVNamen             varchar(30),
    Auszeichnungsname   varchar(30),
    constraint Vereinsauszeichnung_pk primary key (Auszeichnungsname, MVNamen),
    constraint Vereinsauszeichnung_fk foreign key (MVNamen) references Musikverein (Namen)
);

create table Mitglied (
    MVNamen             varchar(30),
    Mitgliedsnummer     int, -- auto generated by mitgliedsnr_generator
    Namen               varchar(30) not null,
    Geburtsdatum        date,
    Beitrittsdatum      date,
    constraint Mitglied_pk primary key (Mitgliedsnummer),
    constraint Mitglied_fk foreign key (MVNamen) references Musikverein (Namen)
);

create table befreundet (
    Mitgliedsnummer1    int,
    Mitgliedsnummer2    int,
    constraint befreundet_pk  primary key (Mitgliedsnummer1, Mitgliedsnummer2),
    constraint befreundet_fk1 foreign key (Mitgliedsnummer1) references Mitglied (Mitgliedsnummer),
    constraint befreundet_fk2 foreign key (Mitgliedsnummer2) references Mitglied (Mitgliedsnummer),
    constraint no_self_friends check (Mitgliedsnummer1 != Mitgliedsnummer2)
);

create table Musiker (
    Mitgliedsnummer     int,
    Musizierbeginn      date,
    constraint Musiker_pk primary key (Mitgliedsnummer),
    constraint Musiker_fk foreign key (Mitgliedsnummer) references Mitglied (Mitgliedsnummer)
);

create table Musikerauszeichnung (
    Mitgliedsnummer     int,
    Bezeichnung         varchar(30),
    constraint Auszeichnung_pk primary key (Mitgliedsnummer, Bezeichnung),
    constraint Auszeichnung_fk foreign key (Mitgliedsnummer) references Musiker (Mitgliedsnummer)
);

create table Instrument (
    Mitgliedsnummer     int,
    Instrumentenname    varchar(30) not null,
    constraint Instrument_pk primary key (Mitgliedsnummer, Instrumentenname),
    constraint Instrument_fk foreign key (Mitgliedsnummer) references Musiker (Mitgliedsnummer)
);

create table Musikgruppe (
    Bezeichnung         varchar(30),
    Typ                 varchar(30),
    constraint Musikgruppe_pk primary key (Bezeichnung)
);

create table Musikstil (
    Gruppenbezeichnung  varchar(30),
    Beschreibung        varchar(30),
    constraint Musikstil_pk primary key (Gruppenbezeichnung, Beschreibung),
    constraint Musikstil_fk foreign key (Gruppenbezeichnung) references Musikgruppe(Bezeichnung)
);

create table spielen (
    Mitgliedsnummer     int,
    Bezeichnung         varchar(30),
    constraint spielen_pk primary key (Mitgliedsnummer, Bezeichnung),
    constraint spielen_fk foreign key (Mitgliedsnummer) references Musiker (Mitgliedsnummer)
);

create table Termin (
    Zeitpunkt           timestamp,
    constraint Termin_pk primary key (Zeitpunkt)
);


-- MGName is not in the primary key so that only one group can prob in a Raum at a time
create table proben (
    MGName              varchar(30),
    Zeitpunkt           timestamp,
    Gebaeude            varchar(30),
    Raumnr              int,
    constraint proben_pk  primary key (Zeitpunkt, Gebaeude, Raumnr),
    constraint proben_fk1 foreign key (MGName) references Musikgruppe (Bezeichnung),
    constraint proben_fk2 foreign key (Zeitpunkt) references Termin (Zeitpunkt),
    constraint proben_fk3 foreign key (Gebaeude, Raumnr) references Raum (Gebaeudename, Raumnr)
);


-- Sequence: is used by the trigger mitgliedsnr_generator
create sequence mitgliedsnr_sequence
    start with 1
    increment by 1;


-- Trigger: Generate incrementing Mitgliedsnummern for Mitglieder.

create or replace trigger mitgliedsnr_generator 
    before insert on Mitglied
for each row
declare
newnumber int;
begin
    if (:new.Mitgliedsnummer is null) then
        :new.Mitgliedsnummer := mitgliedsnr_sequence.nextval;
    end if;
end;
/

